import heapq
class Node:
    def __init__(self, state, parent=None, g=0, h=0):
        self.state = state
        self.parent = parent
        self.g = g  
        self.h = h  
    def __lt__(self, other):
        return (self.g + self.h) < (other.g + other.h)
def astar(start, goal, successors, heuristic):
    open_list = []
    closed_list = set() 
    heapq.heappush(open_list, start)
    
    while open_list:
        current_node = heapq.heappop(open_list)
        
        if current_node.state == goal.state:
            path = []
            while current_node:
                path.append(current_node.state)
                current_node = current_node.parent
            return path[::-1]  # reverse the path to start from the start node
        
        closed_list.add(current_node.state)
        
        for successor in successors(current_node.state):
            if successor in closed_list:
                continue
            
            g_score = current_node.g + 1  # assuming uniform cost for simplicity
            h_score = heuristic(successor, goal.state)
            child = Node(successor, current_node, g_score, h_score)
            
            for node in open_list:
                if node.state == successor and (node.g + node.h) < (child.g + child.h):
                    break
            else:
                heapq.heappush(open_list, child)
    
    return "No path found"
def successors(state):
def heuristic(state, goal_state):
start_state = ...
goal_state = ...

start_node = Node(start_state)
goal_node = Node(goal_state)

path = astar(start_node, goal_node, successors, heuristic)
print(path)
