class State:
    def __init__(self, missionaries_left, cannibals_left, boat_left, missionaries_right, cannibals_right, boat_right):
        self.missionaries_left = missionaries_left
        self.cannibals_left = cannibals_left
        self.boat_left = boat_left
        self.missionaries_right = missionaries_right
        self.cannibals_right = cannibals_right
        self.boat_right = boat_right
        self.turn = 'left'

    def is_valid(self):
        if self.missionaries_left < 0 or self.missionaries_right < 0 or self.cannibals_left < 0 or self.cannibals_right < 0:
            return False
        if self.missionaries_left > 3 or self.missionaries_right > 3 or self.cannibals_left > 3 or self.cannibals_right > 3:
            return False
        if self.missionaries_left < self.cannibals_left and self.missionaries_left > 0:
            return False
        if self.missionaries_right < self.cannibals_right and self.missionaries_right > 0:
            return False
        return True

    def is_goal(self):
        return self.missionaries_left == 0 and self.cannibals_left == 0

    def __str__(self):
        return f"Missionaries Left: {self.missionaries_left}, Cannibals Left: {self.cannibals_left}, Boat Left: {self.boat_left}, \
        Missionaries Right: {self.missionaries_right}, Cannibals Right: {self.cannibals_right}, Boat Right: {self.boat_right}"


def actions(state):
    possible_actions = []
    if state.boat_left > 0:
        for m in range(3):
            for c in range(3):
                if 1 <= m + c <= 2:
                    possible_actions.append((m, c))
    else:
        for m in range(3):
            for c in range(3):
                if 1 <= m + c <= 2:
                    possible_actions.append((-m, -c))
    return possible_actions


def result(state, action):
    if state.boat_left > 0:
        return State(state.missionaries_left - action[0], state.cannibals_left - action[1], state.boat_left - 1,
                     state.missionaries_right + action[0], state.cannibals_right + action[1], state.boat_right + 1)
    else:
        return State(state.missionaries_left + action[0], state.cannibals_left + action[1], state.boat_left + 1,
                     state.missionaries_right - action[0], state.cannibals_right - action[1], state.boat_right - 1)


def minimax(state):
    if state.is_goal():
        return 1 if state.turn == 'left' else -1
    if state.turn == 'left':
        v = -float('inf')
        for action in actions(state):
            new_state = result(state, action)
            if new_state.is_valid():
                v = max(v, minimax(new_state))
        return v
    else:
        v = float('inf')
        for action in actions(state):
            new_state = result(state, action)
            if new_state.is_valid():
                v = min(v, minimax(new_state))
        return v


def get_best_move(state):
    best_value = -float('inf')
    best_move = None
    for action in actions(state):
        new_state = result(state, action)
        if new_state.is_valid():
            value = minimax(new_state)
            if value > best_value:
                best_value = value
                best_move = action
    return best_move


def print_solution(states):
    for state in states:
        print(state)
    print("Solution Found!")


def solve():
    initial_state = State(3, 3, 1, 0, 0, 0)
    states = [initial_state]
    while True:
        move = get_best_move(states[-1])
        if move is None:
            break
        new_state = result(states[-1], move)
        states.append(new_state)
        if new_state.is_goal():
            print_solution(states)
            break


if __name__ == "__main__":
    solve()
