class TicTacToe:
    def __init__(self):
        self.board = [' ']*9

    def print_board(self):
        for i in range(0, 9, 3):
            print('|'.join(self.board[i:i+3]))
            if i < 6:
                print('-'*5)

    def make_move(self, position, player):
        if self.board[position] == ' ':
            self.board[position] = player
            return True
        else:
            return False

    def check_winner(self, player):
        winning_positions = [(0, 1, 2), (3, 4, 5), (6, 7, 8), (0, 3, 6), (1, 4, 7), (2, 5, 8), (0, 4, 8), (2, 4, 6)]
        for pos in winning_positions:
            if self.board[pos[0]] == self.board[pos[1]] == self.board[pos[2]] == player:
                return True
        return False

    def available_moves(self):
        return [i for i, val in enumerate(self.board) if val == ' ']

def minimax(game, player):
    if game.check_winner('X'):
        return -1
    elif game.check_winner('O'):
        return 1
    elif not game.available_moves():
        return 0

    if player == 'O':
        best_score = float('-inf')
        for move in game.available_moves():
            game.make_move(move, player)
            score = minimax(game, 'X')
            game.make_move(move, ' ')
            best_score = max(score, best_score)
    else:
        best_score = float('inf')
        for move in game.available_moves():
            game.make_move(move, player)
            score = minimax(game, 'O')
            game.make_move(move, ' ')
            best_score = min(score, best_score)
    return best_score

def best_move(game, player):
    best_score = float('-inf')
    best_move = None
    for move in game.available_moves():
        game.make_move(move, player)
        score = minimax(game, 'X' if player == 'O' else 'O')
        game.make_move(move, ' ')
        if score > best_score:
            best_score = score
            best_move = move
    return best_move

if __name__ == "__main__":
    game = TicTacToe()
    current_player = 'X'
    while True:
        game.print_board()
        if current_player == 'X':
            position = int(input("Player X, enter your move (1-9): ")) - 1
        else:
            position = best_move(game, 'O')
            print(f"Player O chooses position {position + 1}")
        if not (0 <= position <= 8) or not game.make_move(position, current_player):
            print("Invalid move! Try again.")
            continue
        if game.check_winner(current_player):
            game.print_board()
            print(f"Player {current_player} wins!")
            break
        elif ' ' not in game.board:
            game.print_board()
            print("It's a draw!")
            break
        current_player = 'O' if current_player == 'X' else 'X'
